name: Front-end CI/CD Pipeline

on:
    pull_request:
        branches:
            - main
    push:
        branches:
            - main

permissions:
    contents: write
    issues: write

jobs:
    build:
        name: Build Application
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "16"

            - name: Install dependencies
              run: npm install

            - name: Build
              run: npm run build

    release:
        name: Semantic Release
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  persist-credentials: false

            - name: Set up Node.js (>= 20.8.1)
              uses: actions/setup-node@v3
              with:
                  node-version: "20.8.1"

            - name: Install plugins
              run: |
                  npm install --save-dev semantic-release 
                  npm install --save-dev semantic-release-gitmoji@latest 
                  npm install --save-dev @semantic-release/git
                  npm install --save-dev @semantic-release/github

            - name: Configure Git User
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

            - name: Semantic Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: npx semantic-release

            - name: Update version in package.json and package-lock.json
              if: steps.release.outputs.nextRelease != ''
              run: |
                  VERSION=$(jq -r '.nextRelease.version' <<< "${{ steps.release.outputs.nextRelease }}")
                  jq --arg newVersion "$VERSION" '.version = $newVersion' package.json > tmp.json && mv tmp.json package.json
                  jq --arg newVersion "$VERSION" '.version = $newVersion' package-lock.json > tmp.json && mv tmp.json package-lock.json

            - name: Commit and push version bump
              if: steps.release.outputs.nextRelease != ''
              run: |
                  git add package.json package-lock.json
                  git commit -m "chore: update package version to $VERSION"
                  git push origin main
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
